
const { Client, GatewayIntentBits, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionFlagsBits, ChannelType, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, OAuth2Scopes } = require('discord.js');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.DirectMessages,
  ],
});

// ุชุฎุฒูู ุจูุงูุงุช ุงูุจูุช
const taxRooms = new Map();
const userTaxData = new Map();
let ticketCounter = 0;
const userTickets = new Map();
const ticketClaimers = new Map();
const claimRequests = new Map();
const userGold = new Map();
const messageCount = new Map();
const rankPurchaseChannels = new Map();
const pendingPurchases = new Map();
const applicationSessions = new Map();
const blacklistedUsers = new Map();

// OAuth System
const verifiedUsers = new Map(); // userId -> { accessToken, refreshToken, verified: true, timestamp }
const authorizedVerifiers = new Set(); // userIds who can use !ุซุจุช
const imageOnlyRooms = new Map(); // guildId -> channelId
const autoLineRooms = new Map(); // guildId -> { channelId, imageUrl }

const MEMBER_TICKET_CATEGORY_ID = '1423695912735084627';
const ADMIN_TICKET_CATEGORY_ID = '1423699861403865139';
const RANK_PURCHASE_CATEGORY_ID = '1425235102023024753';
const MEMBER_SUPPORT_ROLES = ['1423641143291412490', '1425492469960806430', '1425500277770817668'];
const ADMIN_SUPPORT_ROLES = ['1425504316197699686', '1425500277770817668'];
const LOG_CHANNEL_ID = '1423819431640961055';
const LEVEL_CHANNEL_ID = '1423420809203941568';
const TRANSFER_TARGET = '1144245830233116753';
const PROBOT_ID = '282859044593598464';
const BOT_OWNERS = ['1179133837930938470', '1144245830233116753'];
const UNVERIFIED_ROLE_ID = '1430298620225388554';
const VERIFIED_ROLE_ID = '1423403089737810020';
const MAIN_SERVER_ID = '1423368485626707991';

const RANKS = {
  PRO: { name: 'PRO', roleId: '1425235102023024753', credits: 15000, gold: 200 },
  VIP: { name: 'ใปVIPใป', roleId: '1425235102023024754', credits: 25000, gold: 400 },
  VIP_PR: { name: 'ใปVIPใปPRใป', roleId: '1425235102023024755', credits: 35000, gold: 600 },
  VIP_FC: { name: 'VIP FC', roleId: '1425235102023024756', credits: 45000, gold: 800 }
};

const APPLICATION_QUESTIONS = [
  'ุงุณูู :',
  'ุนูุฑู :',
  'ูู ููู ุ :',
  'ุฎุจุฑุงุชู :',
  'ุงุฐุง ุงุฏุงุฑู ุงุดุชูู ุนูู ุงุฏุงุฑู ูุงุฐุง ุชูุนู ูุน ุฐูุฑ ุงูุชูุงุตูู ุ :',
  'ุงุฐุง ุงุฏุงุฑู ูุณุชุนูู ุฑุชุจุชู ุจุดูู ุฎุงุทุฆ ูุงุฐุง ุชูุนู ุ ูุน ุฐูุฑ ุงูุชูุงุตูู :',
  'ุงุฐุง ูููุช ุดุฎุต ุงุนูู ููู ุฑุชุจู ูุณุจ ูุง ูุณูู ุงููุดุงูู ูุงุฐุง ุชูุนู :',
  'ุงุชูููุนูููููููุฏ ุงููููู ููููุง ุชูููุฎูููุฑุจ ุงููููุณูููููููุฑููููุฑ :'
];

// ุญุณุงุจ ุงูุถุฑูุจุฉ
function calculateProBotTax(amount) {
  return Math.ceil(amount / 0.95);
}

function calculateMediatorTax(amount) {
  return Math.ceil(amount / 0.90);
}

function calculateRobuxTax(amount) {
  return Math.ceil(amount / 0.70);
}

// ุฅุฑุณุงู ุงูููู
async function sendLog(guild, action, channelName, user) {
  try {
    const logChannel = await guild.channels.fetch(LOG_CHANNEL_ID);
    const embed = new EmbedBuilder()
      .setColor('#5865F2')
      .setTitle('๐ ุณุฌู ุงูุชูุชุงุช')
      .addFields(
        { name: 'ุงูุฅุฌุฑุงุก', value: action, inline: true },
        { name: 'ุงูุฑูู', value: channelName, inline: true },
        { name: 'ุจูุงุณุทุฉ', value: user.tag, inline: true }
      )
      .setTimestamp();
    
    await logChannel.send({ embeds: [embed] });
  } catch (error) {
    console.error('ุฎุทุฃ ูู ุฅุฑุณุงู ุงูููู:', error);
  }
}

// ุงูุชุญูู ูู ุงููุณุชูู 10
async function checkLevel10(guild, userId) {
  try {
    const levelChannel = await guild.channels.fetch(LEVEL_CHANNEL_ID);
    const messages = await levelChannel.messages.fetch({ limit: 100 });
    
    for (const message of messages.values()) {
      if (message.content.includes(`<@${userId}>`) && 
          message.content.includes('๐ฅณ **ุชูุงูููุง**') &&
          message.content.includes('ุฅูู **10**')) {
        return true;
      }
    }
    return false;
  } catch (error) {
    console.error('ุฎุทุฃ ูู ุงูุชุญูู ูู ุงููุณุชูู:', error);
    return false;
  }
}

// ูุธุงู ุงูุฐูุจ
function getUserGold(userId) {
  return userGold.get(userId) || 0;
}

function setUserGold(userId, amount) {
  userGold.set(userId, amount);
}

function addGold(userId, amount) {
  const current = getUserGold(userId);
  setUserGold(userId, current + amount);
}

function removeGold(userId, amount) {
  const current = getUserGold(userId);
  setUserGold(userId, Math.max(0, current - amount));
}

client.once('ready', async () => {
  console.log(`โ ุงูุจูุช ุฌุงูุฒ: ${client.user.tag}`);

  const commands = [
    {
      name: 'ุชุญุฏูุฏ_ุฑูู_ุงูุถุฑูุจุฉ',
      description: 'ุชุญุฏูุฏ ุฑูู ุญุณุงุจ ุงูุถุฑูุจุฉ',
      options: [
        {
          name: 'ุงูุฑูู',
          type: 7,
          description: 'ุงุฎุชุฑ ุงูุฑูู',
          required: true,
        },
      ],
    },
    {
      name: 'ุชูุชุงุช',
      description: 'ุฅูุดุงุก ูุธุงู ุงูุชูุชุงุช',
      options: [
        {
          name: 'ุงูุนููุงู',
          type: 3,
          description: 'ุนููุงู ุงูุชูุช',
          required: true,
        },
        {
          name: 'ุงููุตู',
          type: 3,
          description: 'ูุตู ุงูุชูุช',
          required: true,
        },
        {
          name: 'ุงูููุน',
          type: 3,
          description: 'ููุน ุงูุชูุช',
          required: true,
          choices: [
            { name: 'ุชูุช ุฃุนุถุงุก', value: 'member' },
            { name: 'ุชูุช ุฅุฏุงุฑุฉ', value: 'admin' },
          ],
        },
        {
          name: 'ุงูุฑูู',
          type: 7,
          description: 'ุฃูู ุณูุชู ุฅุฑุณุงู ุงูุฅููุจุฏ',
          required: true,
        },
        {
          name: 'ุงูุตูุฑุฉ',
          type: 11,
          description: 'ุตูุฑุฉ ุงูุชูุช',
          required: false,
        },
      ],
    },
    {
      name: 'ุงุฑุณุงู_ุงููุจุฏ',
      description: 'ุฅุฑุณุงู ุฅููุจุฏ ูุธุงู ุงูุฑุชุจ ุงูุดุฑุงุฆูุฉ',
      options: [
        {
          name: 'ุงูุฑูู',
          type: 7,
          description: 'ุฃูู ุณูุชู ุฅุฑุณุงู ุงูุฅููุจุฏ',
          required: true,
        },
        {
          name: 'ุงูุตูุฑุฉ',
          type: 11,
          description: 'ุตูุฑุฉ ุงูุฅููุจุฏ',
          required: true,
        },
      ],
    },
    {
      name: 'ุงุนุทุงุก_ุฐูุจ',
      description: 'ุฅุนุทุงุก ุฐูุจ ูุดุฎุต (ูููุงูููู ููุท)',
      options: [
        {
          name: 'ุงูุดุฎุต',
          type: 6,
          description: 'ุงูุดุฎุต ุงูุฐู ุณูุญุตู ุนูู ุงูุฐูุจ',
          required: true,
        },
        {
          name: 'ุงููููุฉ',
          type: 4,
          description: 'ูููุฉ ุงูุฐูุจ',
          required: true,
        },
      ],
    },
    {
      name: 'ุชูุฏูู',
      description: 'ุฅูุดุงุก ูุธุงู ุงูุชูุฏูู ููุฅุฏุงุฑุฉ',
      options: [
        {
          name: 'ุงูุฑูู',
          type: 7,
          description: 'ุฃูู ุณูุชู ุฅุฑุณุงู ุงูุฅููุจุฏ',
          required: true,
        },
      ],
    },
    {
      name: 'ุชูุซูู',
      description: 'ุฅูุดุงุก ูุธุงู ุงูุชูุซูู',
      options: [
        {
          name: 'ุงูุตูุฑุฉ',
          type: 11,
          description: 'ุตูุฑุฉ ุงูุชูุซูู',
          required: true,
        },
        {
          name: 'ุงูุฑูู',
          type: 7,
          description: 'ุฃูู ุณูุชู ุฅุฑุณุงู ุงูุฅููุจุฏ',
          required: true,
        },
      ],
    },
    {
      name: 'ุงุซุจุช_ููุณู',
      description: 'ุฅุฑุณุงู ุฅููุจุฏ ุฅุซุจุงุช ุงูููุณ ูุน OAuth',
      options: [
        {
          name: 'ุงูุฑูู',
          type: 7,
          description: 'ุฃูู ุณูุชู ุฅุฑุณุงู ุงูุฅููุจุฏ',
          required: true,
        },
      ],
    },
    {
      name: 'ุงุถุงูุฉ_ููุญุต',
      description: 'ุฅุถุงูุฉ ุดุฎุต ูุงุณุชุฎุฏุงู ุฃูุฑ !ุซุจุช (ูููุงูู ููุท)',
      options: [
        {
          name: 'ุงูุดุฎุต',
          type: 6,
          description: 'ุงูุดุฎุต ุงูุฐู ุณูุชู ุฅุถุงูุชู',
          required: true,
        },
      ],
    },
    {
      name: 'ุงุฒุงูุฉ_ููุญุต',
      description: 'ุฅุฒุงูุฉ ุดุฎุต ูู ุงุณุชุฎุฏุงู ุฃูุฑ !ุซุจุช (ูููุงูู ููุท)',
      options: [
        {
          name: 'ุงูุดุฎุต',
          type: 6,
          description: 'ุงูุดุฎุต ุงูุฐู ุณูุชู ุฅุฒุงูุชู',
          required: true,
        },
      ],
    },
    {
      name: 'ุงุฏุฎุงู_ุงุนุถุงุก',
      description: 'ุฅุฏุฎุงู ุฃุนุถุงุก ููุซููู ููุณูุฑูุฑ (ูููุงูู ูุงูููุญุตูู ููุท)',
      options: [
        {
          name: 'ุงูุนุฏุฏ',
          type: 4,
          description: 'ุนุฏุฏ ุงูุฃุนุถุงุก ุงููุฑุงุฏ ุฅุฏุฎุงููู',
          required: true,
        },
      ],
    },
    {
      name: 'ุชุญุฏูุฏ_ุฑูู_ุตูุฑ',
      description: 'ุชุญุฏูุฏ ุฑูู ููุตูุฑ ููุท',
      options: [
        {
          name: 'ุงูุฑูู',
          type: 7,
          description: 'ุงูุฑูู ุงูุฐู ุณูููู ููุตูุฑ ููุท',
          required: true,
        },
      ],
    },
    {
      name: 'ุชุญุฏูุฏ_ุฑูู_ุฎุท',
      description: 'ุชุญุฏูุฏ ุฑูู ููุฎุท ุงูุชููุงุฆู',
      options: [
        {
          name: 'ุงูุฑูู',
          type: 7,
          description: 'ุงูุฑูู ุงูุฐู ุณูุญุชูู ุนูู ุฎุท ุชููุงุฆู',
          required: true,
        },
        {
          name: 'ุงูุตูุฑุฉ',
          type: 11,
          description: 'ุตูุฑุฉ ุงูุฎุท ุงูุชููุงุฆู',
          required: true,
        },
      ],
    },
    {
      name: 'reset',
      description: 'ุฅุนุงุฏุฉ ุชุนููู ุฐูุจ ุฌููุน ุงูุฃุดุฎุงุต (ูููุงูู ููุท)',
    },
    {
      name: 'reset_user',
      description: 'ุฅุนุงุฏุฉ ุชุนููู ุฐูุจ ุดุฎุต ูุงุญุฏ (ูููุงูู ููุท)',
      options: [
        {
          name: 'ุงูุดุฎุต',
          type: 6,
          description: 'ุงูุดุฎุต ุงูุฐู ุณูุชู ุฅุนุงุฏุฉ ุชุนููู ุฐูุจู',
          required: true,
        },
      ],
    },
    {
      name: 'blacklist',
      description: 'ุฅุถุงูุฉ ุดุฎุต ูููุงุฆูุฉ ุงูุณูุฏุงุก (ูููุงูู ููุท)',
      options: [
        {
          name: 'ุงูุดุฎุต',
          type: 6,
          description: 'ุงูุดุฎุต ุงูุฐู ุณูุชู ุญุธุฑู',
          required: true,
        },
      ],
    },
    {
      name: 'unblacklist',
      description: 'ุฅุฒุงูุฉ ุดุฎุต ูู ุงููุงุฆูุฉ ุงูุณูุฏุงุก (ูููุงูู ููุท)',
      options: [
        {
          name: 'ุงูุดุฎุต',
          type: 6,
          description: 'ุงูุดุฎุต ุงูุฐู ุณูุชู ุฅูุบุงุก ุญุธุฑู',
          required: true,
        },
      ],
    },
    {
      name: 'owner_panel',
      description: 'ููุญุฉ ุชุญูู ุงููุงูู (ูููุงูู ููุท)',
      options: [
        {
          name: 'ุงูุฅุฌุฑุงุก',
          type: 3,
          description: 'ุงุฎุชุฑ ุงูุฅุฌุฑุงุก',
          required: true,
          choices: [
            { name: 'ุนุฑุถ ุงูุฅุญุตุงุฆูุงุช', value: 'stats' },
            { name: 'ุฅุนุงุฏุฉ ุชุดุบูู ุงูุจูุช', value: 'restart' },
          ],
        },
      ],
    },
  ];

  try {
    await client.application.commands.set(commands);
    console.log('โ ุชู ุชุณุฌูู ุงูุฃูุงูุฑ ุจูุฌุงุญ');
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุชุณุฌูู ุงูุฃูุงูุฑ:', error);
  }
});

// ูุนุงูุฌุฉ ุงูุฑุณุงุฆู
client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  // ูุญุต ุงููุงุฆูุฉ ุงูุณูุฏุงุก
  if (blacklistedUsers.has(message.author.id)) {
    return;
  }

  const taxRoom = taxRooms.get(message.guild?.id);
  
  // ูุธุงู ุงูุฐูุจ - ุงูุชูุงุนู
  if (!taxRoom || taxRoom !== message.channel.id) {
    const userId = message.author.id;
    const count = messageCount.get(userId) || 0;
    messageCount.set(userId, count + 1);
    
    if ((count + 1) % 23 === 0) {
      addGold(userId, 3);
    }
  }

  // ุฑูู ุงูุตูุฑ ููุท
  const imageOnlyRoom = imageOnlyRooms.get(message.guild?.id);
  if (imageOnlyRoom === message.channel.id) {
    if (!message.attachments.some(att => att.contentType?.startsWith('image/'))) {
      await message.delete().catch(() => {});
      return;
    }
    await message.react('๐ผ๏ธ').catch(() => {});
  }

  // ุฑูู ุงูุฎุท ุงูุชููุงุฆู
  const autoLineRoom = autoLineRooms.get(message.guild?.id);
  if (autoLineRoom && autoLineRoom.channelId === message.channel.id) {
    await message.channel.send(autoLineRoom.imageUrl).catch(() => {});
  }

  // ุฃูุฑ !ุซุจุช
  if (message.content.startsWith('!ุซุจุช')) {
    if (!BOT_OWNERS.includes(message.author.id) && !authorizedVerifiers.has(message.author.id)) {
      return message.reply('โ ููุณ ูุฏูู ุตูุงุญูุฉ ุงุณุชุฎุฏุงู ูุฐุง ุงูุฃูุฑ!');
    }

    const mentionedUser = message.mentions.users.first();
    if (!mentionedUser) {
      return message.reply('โ ูุฌุจ ุนููู ููุดู ุงูุดุฎุต! ูุซุงู: `!ุซุจุช @ุงูุดุฎุต`');
    }

    const verificationData = verifiedUsers.get(mentionedUser.id);
    if (!verificationData || !verificationData.verified) {
      return message.reply(`โ ${mentionedUser} ูู ูุซุจุช ููุณู ุจุนุฏ!`);
    }

    const embed = new EmbedBuilder()
      .setColor('#57F287')
      .setTitle('โ ุงูุดุฎุต ููุซู')
      .setDescription(`${mentionedUser} ูุงู ุจุฅุซุจุงุช ููุณู ุจูุฌุงุญ!`)
      .addFields(
        { name: 'ููุช ุงูุฅุซุจุงุช', value: `<t:${Math.floor(verificationData.timestamp / 1000)}:R>`, inline: true }
      )
      .setTimestamp();

    return message.reply({ embeds: [embed] });
  }

  // ุฃูุฑ !ุงููุงุณ
  if (message.content === '!ุงููุงุณ') {
    if (!BOT_OWNERS.includes(message.author.id)) {
      return message.reply('โ ููุณ ูุฏูู ุตูุงุญูุฉ ุงุณุชุฎุฏุงู ูุฐุง ุงูุฃูุฑ!');
    }

    const totalVerified = verifiedUsers.size;
    const embed = new EmbedBuilder()
      .setColor('#5865F2')
      .setTitle('๐ ุฅุญุตุงุฆูุงุช ุงูุฃุดุฎุงุต ุงูููุซููู')
      .setDescription(`**ุนุฏุฏ ุงูุฃุดุฎุงุต ุงูููุซููู:** ${totalVerified}`)
      .setTimestamp();

    return message.reply({ embeds: [embed] });
  }

  const content = message.content.trim();
  
  // top g
  if (content.toLowerCase() === 'top g') {
    const sortedUsers = Array.from(userGold.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10);

    const embed = new EmbedBuilder()
      .setColor('#FFD700')
      .setTitle('๐ ุฃุบูู 10 ุฃุดุฎุงุต ุจุงูุฐูุจ')
      .setTimestamp();

    let description = '';
    sortedUsers.forEach(([userId, gold], index) => {
      const medal = index === 0 ? '๐ฅ' : index === 1 ? '๐ฅ' : index === 2 ? '๐ฅ' : `${index + 1}.`;
      description += `${medal} <@${userId}> - **${gold}** ๐ช\n`;
    });

    embed.setDescription(description || 'ูุง ููุฌุฏ ุฃุญุฏ ูุฏูู ุฐูุจ ุจุนุฏ');

    await message.reply({ embeds: [embed] });
    return;
  }

  if (content === 'g' || content === 'G') {
    const gold = getUserGold(message.author.id);
    await message.reply(`ูุฏูู **${gold}** ุฐูุจูุฉ ๐ช`);
    return;
  }

  const goldCheckMatch = content.match(/^g\s+<@!?(\d+)>$/i);
  if (goldCheckMatch) {
    const targetId = goldCheckMatch[1];
    const gold = getUserGold(targetId);
    await message.reply(`<@${targetId}> ูุฏูู **${gold}** ุฐูุจูุฉ ๐ช`);
    return;
  }

  const goldTransferMatch = content.match(/^g\s+<@!?(\d+)>\s+(\d+)$/i);
  if (goldTransferMatch) {
    const targetId = goldTransferMatch[1];
    const amount = parseInt(goldTransferMatch[2]);
    const senderGold = getUserGold(message.author.id);
    
    const purchaseData = pendingPurchases.get(message.channel.id);
    
    if (purchaseData && purchaseData.paymentType === 'gold' && message.author.id === purchaseData.userId) {
      if (amount === purchaseData.amount && targetId === TRANSFER_TARGET) {
        if (senderGold < amount) {
          await message.reply('โ ููุณ ูุฏูู ุฐูุจ ูุงูู!');
          return;
        }
        
        removeGold(message.author.id, amount);
        addGold(targetId, amount);
        
        await message.reply(`โ ุชู ุชุญููู **${amount}** ุฐูุจูุฉ ุฅูู <@${targetId}>`);
        
        const rank = RANKS[purchaseData.rankId];
        const member = await message.guild.members.fetch(message.author.id);
        await member.roles.add(rank.roleId);
        
        setTimeout(async () => {
          await member.roles.remove(rank.roleId).catch(() => {});
        }, 7 * 24 * 60 * 60 * 1000);
        
        await message.channel.send(`โ ุชู ุฅุนุทุงุคู ุฑุชุจุฉ ${rank.name} ููุฏุฉ ุฃุณุจูุน!`);
        
        setTimeout(async () => {
          await message.channel.delete().catch(() => {});
          rankPurchaseChannels.delete(message.channel.id);
          pendingPurchases.delete(message.channel.id);
        }, 60000);
        
        return;
      }
    }
    
    if (senderGold < amount) {
      await message.reply('โ ููุณ ูุฏูู ุฐูุจ ูุงูู!');
      return;
    }
    
    removeGold(message.author.id, amount);
    addGold(targetId, amount);
    
    await message.reply(`โ ุชู ุชุญููู **${amount}** ุฐูุจูุฉ ุฅูู <@${targetId}>`);
    return;
  }

  // ูุนุงูุฌุฉ ุงูุชูุฏูู ูู DM
  const appSession = applicationSessions.get(message.author.id);
  if (appSession && message.channel.type === 1) {
    const answer = message.content;
    appSession.answers.push(answer);
    
    if (appSession.currentQuestion < APPLICATION_QUESTIONS.length) {
      const embed = new EmbedBuilder()
        .setColor('#5865F2')
        .setDescription(APPLICATION_QUESTIONS[appSession.currentQuestion]);
      
      await message.channel.send({ embeds: [embed] });
      appSession.currentQuestion++;
    } else {
      const resultEmbed = new EmbedBuilder()
        .setColor('#57F287')
        .setTitle('โ ุชู ุฅุฑุณุงู ุทูุจู ุจูุฌุงุญ!')
        .setDescription('ุณูุชู ูุฑุงุฌุนุฉ ุทูุจู ูุฑูุจุงู')
        .setTimestamp();
      
      await message.channel.send({ embeds: [resultEmbed] });
      
      const guild = client.guilds.cache.get(appSession.guildId);
      if (guild) {
        const logChannel = await guild.channels.fetch(LOG_CHANNEL_ID);
        const appEmbed = new EmbedBuilder()
          .setColor('#5865F2')
          .setTitle('๐ ุทูุจ ุชูุฏูู ุฌุฏูุฏ ููุฅุฏุงุฑุฉ')
          .setThumbnail(message.author.displayAvatarURL())
          .setDescription(`**ุงููุชูุฏู:** ${message.author}\n**ุงูุฃุฌูุจุฉ:**\n\n${APPLICATION_QUESTIONS.map((q, i) => `**${q}**\n${appSession.answers[i]}`).join('\n\n')}`)
          .setTimestamp();
        
        await logChannel.send({ embeds: [appEmbed] });
      }
      
      applicationSessions.delete(message.author.id);
    }
    return;
  }

  // ูุธุงู ุงูุถุฑูุจุฉ
  if (taxRoom === message.channel.id) {
    if (!/^\d+$/.test(content)) {
      await message.delete().catch(() => {});
      return;
    }

    const amount = parseInt(content);
    const proBotTax = calculateProBotTax(amount);
    const mediatorTax = calculateMediatorTax(amount);

    userTaxData.set(`${message.author.id}-${message.id}`, {
      amount,
      proBotTax,
      mediatorTax,
      userId: message.author.id,
    });

    const embed = new EmbedBuilder()
      .setColor('#5865F2')
      .addFields(
        { name: 'ุถูููุฑูููุจูููุฉ ุงูููุจูููุฑูุจูููุช <:1000060494:1424294056066027562>', value: `\`${proBotTax.toLocaleString()}\``, inline: false },
        { name: 'ุถูููุฑููููุจููุฉ ุงููููุณูููููููุท <a:1000060667:1424294036176371765>', value: `\`${mediatorTax.toLocaleString()}\``, inline: false }
      )
      .setTimestamp();

    const row = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(`robux_${message.author.id}_${message.id}`)
          .setEmoji('1424294076597141524')
          .setStyle(ButtonStyle.Primary)
      );

    await message.channel.send({
      embeds: [embed],
      components: [row],
    });
  }

  // ุงูุชุญูู ูู ุฑุณุงูุฉ ProBot ููุชุญููู
  if (message.author.id === PROBOT_ID && message.embeds.length > 0) {
    const embed = message.embeds[0];
    if (embed.image && embed.image.url) {
      const channelId = message.channel.id;
      const purchaseData = pendingPurchases.get(channelId);
      
      if (purchaseData && purchaseData.waitingForProBot) {
        purchaseData.proBotMessageId = message.id;
        pendingPurchases.set(channelId, purchaseData);
      }
    }
  }

  // ุงูุชุญูู ูู ุฑุณุงูุฉ ุงูุชุญููู ูู ProBot
  if (message.author.id === PROBOT_ID && message.content.includes(':moneybag:')) {
    const channelId = message.channel.id;
    const purchaseData = pendingPurchases.get(channelId);
    
    if (purchaseData && purchaseData.paymentType === 'credits') {
      const rank = RANKS[purchaseData.rankId];
      const member = await message.guild.members.fetch(purchaseData.userId);
      await member.roles.add(rank.roleId);
      
      setTimeout(async () => {
        await member.roles.remove(rank.roleId).catch(() => {});
      }, 7 * 24 * 60 * 60 * 1000);
      
      await message.channel.send(`โ ุชู ุฅุนุทุงุคู ุฑุชุจุฉ ${rank.name} ููุฏุฉ ุฃุณุจูุน!`);
      
      setTimeout(async () => {
        await message.channel.delete().catch(() => {});
        rankPurchaseChannels.delete(channelId);
        pendingPurchases.delete(channelId);
      }, 60000);
    }
  }
});

// ูุนุงูุฌุฉ ุงูุฃุฒุฑุงุฑ ูุงูููุงุฆู
client.on('interactionCreate', async (interaction) => {
  // ูุญุต ุงููุงุฆูุฉ ุงูุณูุฏุงุก
  if (blacklistedUsers.has(interaction.user.id)) {
    if (interaction.isRepliable()) {
      await interaction.reply({
        content: 'โ ุฃูุช ูุญุธูุฑ ูู ุงุณุชุฎุฏุงู ุงูุจูุช!',
        ephemeral: true,
      }).catch(() => {});
    }
    return;
  }

  if (interaction.isButton()) {
    const customId = interaction.customId;

    // ุฒุฑ ุฅุซุจุงุช ุงูููุณ OAuth
    if (customId === 'verify_oauth') {
      const clientId = process.env.DISCORD_CLIENT_ID || client.user.id;
      const redirectUri = encodeURIComponent('https://discord.com/api/oauth2/authorize');
      const oauthUrl = `https://discord.com/api/oauth2/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&response_type=code&scope=identify%20guilds.join`;

      await interaction.reply({
        content: `โ ุงุถุบุท ุนูู ุงูุฑุงุจุท ุงูุชุงูู ูุฅุซุจุงุช ููุณู:\n${oauthUrl}\n\n**ููุงุญุธุฉ:** ุจุนุฏ ุงูููุงููุฉุ ุณูุชู ุชุณุฌููู ุชููุงุฆูุงู!`,
        ephemeral: true,
      });

      // ุชุณุฌูู ุงููุณุชุฎุฏู ูููุซู (ูู ุญุงูุฉ ุญููููุฉุ ุณุชุญุชุงุฌ ููุนุงูุฌุฉ OAuth callback)
      verifiedUsers.set(interaction.user.id, {
        verified: true,
        timestamp: Date.now()
      });
    }

    // ุฃุฒุฑุงุฑ ุงูุถุฑูุจุฉ
    if (customId.startsWith('robux_') || customId.startsWith('probot_')) {
      const [action, userId, messageId] = customId.split('_');
      const taxData = userTaxData.get(`${userId}-${messageId}`);
      
      if (!taxData || interaction.user.id !== userId) {
        await interaction.reply({
          content: 'ููููุงููููู ุฏุฎููู ุจููุถูููุฑูููุจููุฉ ุบูููููุฑู <:1000060784:1426980204814798978>',
          ephemeral: true,
        });
        return;
      }

      if (action === 'robux') {
        const robuxTax = calculateRobuxTax(taxData.amount);

        const embed = new EmbedBuilder()
          .setColor('#5865F2')
          .addFields(
            { name: 'ุถูููุฑููููุจููุฉ ุฑูุจููููููููุณ <:1000060493:1424294076597141524>', value: `\`${robuxTax.toLocaleString()}\``, inline: false }
          )
          .setTimestamp();

        const row = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId(`probot_${userId}_${messageId}`)
              .setEmoji('1424294056066027562')
              .setStyle(ButtonStyle.Primary)
          );

        await interaction.update({
          embeds: [embed],
          components: [row],
        });
      } else if (action === 'probot') {
        const embed = new EmbedBuilder()
          .setColor('#5865F2')
          .addFields(
            { name: 'ุถูููุฑูููุจูููุฉ ุงูููุจูููุฑูุจูููุช <:1000060494:1424294056066027562>', value: `\`${taxData.proBotTax.toLocaleString()}\``, inline: false },
            { name: 'ุถูููุฑููููุจููุฉ ุงููููุณูููููููุท <a:1000060667:1424294036176371765>', value: `\`${taxData.mediatorTax.toLocaleString()}\``, inline: false }
          )
          .setTimestamp();

        const row = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId(`robux_${userId}_${messageId}`)
              .setEmoji('1424294076597141524')
              .setStyle(ButtonStyle.Primary)
          );

        await interaction.update({
          embeds: [embed],
          components: [row],
        });
      }
    }
    // ุฒุฑ ูุชุญ ุงูุชูุช
    else if (customId.startsWith('open_ticket_')) {
      const [, , type] = customId.split('_');
      
      const existingTicket = userTickets.get(interaction.user.id);
      if (existingTicket) {
        await interaction.reply({
          content: 'โ ูุฏูู ุชูุช ููุชูุญ ุจุงููุนู! ูุง ููููู ูุชุญ ุฃูุซุฑ ูู ุชูุช ูุงุญุฏ.',
          ephemeral: true,
        });
        return;
      }

      ticketCounter++;
      const ticketName = `ticket-${ticketCounter}`;
      const categoryId = type === 'member' ? MEMBER_TICKET_CATEGORY_ID : ADMIN_TICKET_CATEGORY_ID;
      const supportRoles = type === 'member' ? MEMBER_SUPPORT_ROLES : ADMIN_SUPPORT_ROLES;

      try {
        const ticketChannel = await interaction.guild.channels.create({
          name: ticketName,
          type: ChannelType.GuildText,
          parent: categoryId,
          permissionOverwrites: [
            {
              id: interaction.guild.id,
              deny: [PermissionFlagsBits.ViewChannel],
            },
            {
              id: interaction.user.id,
              allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages],
            },
            ...supportRoles.map(roleId => ({
              id: roleId,
              allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages],
            })),
          ],
        });

        userTickets.set(interaction.user.id, ticketChannel.id);

        const supportMentions = supportRoles.map(roleId => `<@&${roleId}>`).join(' ');
        
        const welcomeEmbed = new EmbedBuilder()
          .setColor('#57F287')
          .setTitle('๐ซ ุชูุช ุฌุฏูุฏ')
          .setDescription(`**ุงูุดุฎุต:** ${interaction.user}\n\nูุฑุญุจุงู ูุฑุฌู ุงูุชุธุงุฑ ุงููุณุคูููู`)
          .setThumbnail(interaction.guild.iconURL())
          .setTimestamp();

        const row = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId(`claim_${ticketChannel.id}_${interaction.user.id}`)
              .setEmoji('1426984430286667918')
              .setLabel('ุงุณุชูุงู')
              .setStyle(ButtonStyle.Success),
            new ButtonBuilder()
              .setCustomId(`request_claim_${ticketChannel.id}_${interaction.user.id}`)
              .setEmoji('1426984499891277944')
              .setLabel('ุทูุจ ุงุณุชูุงู')
              .setStyle(ButtonStyle.Primary)
              .setDisabled(true),
            new ButtonBuilder()
              .setCustomId(`close_${ticketChannel.id}_${interaction.user.id}`)
              .setEmoji('1426984479469076661')
              .setLabel('ููู')
              .setStyle(ButtonStyle.Danger)
              .setDisabled(true)
          );

        await ticketChannel.send({
          content: supportMentions,
          embeds: [welcomeEmbed],
          components: [row],
        });

        await sendLog(interaction.guild, 'ูุชุญ ุชูุช', ticketName, interaction.user);

        await interaction.reply({
          content: `โ ุชู ุฅูุดุงุก ุชูุชู: ${ticketChannel}`,
          ephemeral: true,
        });
      } catch (error) {
        console.error('ุฎุทุฃ ูู ุฅูุดุงุก ุงูุชูุช:', error);
        await interaction.reply({
          content: 'โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุงูุชูุช',
          ephemeral: true,
        });
      }
    }
    // ุจุงูู ุฃุฒุฑุงุฑ ุงูุชูุช
    else if (customId.startsWith('claim_')) {
      const [, ticketChannelId, ticketOwnerId] = customId.split('_');
      
      if (interaction.user.id === ticketOwnerId) {
        await interaction.reply({
          content: 'โ ูุง ููููู ุงุณุชูุงู ุชูุชู ุงูุฎุงุต!',
          ephemeral: true,
        });
        return;
      }

      ticketClaimers.set(ticketChannelId, interaction.user.id);
      claimRequests.set(ticketChannelId, new Set());

      await interaction.channel.permissionOverwrites.edit(interaction.guild.id, {
        ViewChannel: false,
      });

      await interaction.channel.permissionOverwrites.edit(interaction.user.id, {
        ViewChannel: true,
        SendMessages: true,
      });

      await interaction.channel.permissionOverwrites.edit(ticketOwnerId, {
        ViewChannel: true,
        SendMessages: true,
      });

      const row = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId(`claim_${ticketChannelId}_${ticketOwnerId}`)
            .setEmoji('1426984430286667918')
            .setLabel('ุงุณุชูุงู')
            .setStyle(ButtonStyle.Success)
            .setDisabled(true),
          new ButtonBuilder()
            .setCustomId(`request_claim_${ticketChannelId}_${ticketOwnerId}`)
            .setEmoji('1426984499891277944')
            .setLabel('ุทูุจ ุงุณุชูุงู')
            .setStyle(ButtonStyle.Primary),
          new ButtonBuilder()
            .setCustomId(`close_${ticketChannelId}_${ticketOwnerId}`)
            .setEmoji('1426984479469076661')
            .setLabel('ููู')
            .setStyle(ButtonStyle.Danger)
        );

      await interaction.update({ components: [row] });

      await interaction.channel.send({
        content: `โ ุชู ุงุณุชูุงู ุงูุชูุช ุจูุงุณุทุฉ ${interaction.user}`,
      });
    }
    else if (customId.startsWith('request_claim_')) {
      const [, , ticketChannelId, ticketOwnerId] = customId.split('_');
      
      if (interaction.user.id === ticketOwnerId) {
        await interaction.reply({
          content: 'โ ูุง ููููู ุทูุจ ุงุณุชูุงู ุชูุชู ุงูุฎุงุต!',
          ephemeral: true,
        });
        return;
      }

      const claimerId = ticketClaimers.get(ticketChannelId);
      if (!claimerId) {
        await interaction.reply({
          content: 'โ ูุง ููุฌุฏ ูุณุชูู ููุชูุช ุญุงููุงู!',
          ephemeral: true,
        });
        return;
      }

      if (interaction.user.id === claimerId) {
        await interaction.reply({
          content: 'โ ุฃูุช ุงููุณุชูู ุงูุญุงูู!',
          ephemeral: true,
        });
        return;
      }

      const requests = claimRequests.get(ticketChannelId);
      if (requests.has(interaction.user.id)) {
        await interaction.reply({
          content: 'โ ููุฏ ููุช ุจุทูุจ ุงูุงุณุชูุงู ูุณุจูุงู!',
          ephemeral: true,
        });
        return;
      }

      requests.add(interaction.user.id);

      const requestEmbed = new EmbedBuilder()
        .setColor('#FFA500')
        .setDescription(`${interaction.user} ุทูุจ ุงุณุชูุงู ุงูุชูุช`);

      const requestRow = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId(`accept_request_${ticketChannelId}_${ticketOwnerId}_${interaction.user.id}`)
            .setLabel('ูุจูู')
            .setStyle(ButtonStyle.Success),
          new ButtonBuilder()
            .setCustomId(`deny_request_${ticketChannelId}_${ticketOwnerId}_${interaction.user.id}`)
            .setLabel('ุฑูุถ')
            .setStyle(ButtonStyle.Danger)
        );

      await interaction.channel.send({
        embeds: [requestEmbed],
        components: [requestRow],
      });

      await interaction.reply({
        content: 'โ ุชู ุฅุฑุณุงู ุทูุจ ุงูุงุณุชูุงู',
        ephemeral: true,
      });
    }
    else if (customId.startsWith('accept_request_')) {
      const [, , ticketChannelId, ticketOwnerId, requesterId] = customId.split('_');
      
      const claimerId = ticketClaimers.get(ticketChannelId);
      if (interaction.user.id !== claimerId) {
        await interaction.reply({
          content: 'โ ููุท ุงููุณุชูู ุงูุญุงูู ููููู ูุจูู ุงูุทูุจ!',
          ephemeral: true,
        });
        return;
      }

      ticketClaimers.set(ticketChannelId, requesterId);

      await interaction.channel.permissionOverwrites.edit(claimerId, {
        ViewChannel: true,
        SendMessages: false,
      });

      await interaction.channel.permissionOverwrites.edit(requesterId, {
        ViewChannel: true,
        SendMessages: true,
      });

      await interaction.update({
        components: [],
      });

      await interaction.channel.send({
        content: `โ ุชู ูุจูู ุทูุจ <@${requesterId}> ููุงุณุชูุงู`,
      });
    }
    else if (customId.startsWith('deny_request_')) {
      const [, , ticketChannelId] = customId.split('_');
      
      const claimerId = ticketClaimers.get(ticketChannelId);
      if (interaction.user.id !== claimerId) {
        await interaction.reply({
          content: 'โ ููุท ุงููุณุชูู ุงูุญุงูู ููููู ุฑูุถ ุงูุทูุจ!',
          ephemeral: true,
        });
        return;
      }

      await interaction.update({
        components: [],
      });

      await interaction.channel.send({
        content: 'โ ุชู ุฑูุถ ุงูุทูุจ',
      });
    }
    else if (customId.startsWith('close_')) {
      const [, ticketChannelId, ticketOwnerId] = customId.split('_');
      
      if (interaction.user.id === ticketOwnerId) {
        await interaction.reply({
          content: 'โ ูุง ููููู ููู ุชูุชู ุงูุฎุงุต!',
          ephemeral: true,
        });
        return;
      }

      const claimerId = ticketClaimers.get(ticketChannelId);
      if (!claimerId || interaction.user.id !== claimerId) {
        await interaction.reply({
          content: 'โ ููุท ูุณุชูู ุงูุชูุช ููููู ุงูููู!',
          ephemeral: true,
        });
        return;
      }

      const channelName = interaction.channel.name;
      
      await sendLog(interaction.guild, 'ููู ุชูุช', channelName, interaction.user);

      userTickets.delete(ticketOwnerId);
      ticketClaimers.delete(ticketChannelId);
      claimRequests.delete(ticketChannelId);

      await interaction.channel.delete();
    }
    else if (customId === 'apply_admin_start') {
      const hasLevel10 = await checkLevel10(interaction.guild, interaction.user.id);
      
      if (!hasLevel10) {
        await interaction.reply({
          content: 'ูููุงุชูููุณููุชููุญูู ููููุงุนูููููุฏู ููููููู 10 ูุฌูููุงู ุชููููููุฏู <:1000060811:1426992193402441919>',
          ephemeral: true,
        });
        return;
      }

      await interaction.reply({
        content: 'โ ุงูุชูู ุฅูู ุงูุฎุงุต ููุชูุฏูู!',
        ephemeral: true,
      });

      try {
        const embed = new EmbedBuilder()
          .setColor('#5865F2')
          .setTitle('ูู ุชุฑูุฏ ุงูุชูุฏูู ุฅูู ุงูุฅุฏุงุฑุฉ ูุนูุงู ุ')
          .setFooter({ text: interaction.guild.id })
          .setTimestamp();

        const row = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId('apply_confirm_yes')
              .setLabel('ูุนู')
              .setStyle(ButtonStyle.Success),
            new ButtonBuilder()
              .setCustomId('apply_confirm_no')
              .setLabel('ูุง')
              .setStyle(ButtonStyle.Danger)
          );

        await interaction.user.send({
          embeds: [embed],
          components: [row],
        });
      } catch (error) {
        console.error('ุฎุทุฃ ูู ุฅุฑุณุงู ุฑุณุงูุฉ ุฎุงุตุฉ:', error);
      }
    }
    else if (customId === 'apply_confirm_yes') {
      applicationSessions.set(interaction.user.id, {
        guildId: interaction.message.embeds[0].footer?.text,
        currentQuestion: 1,
        answers: []
      });

      const embed = new EmbedBuilder()
        .setColor('#5865F2')
        .setDescription(APPLICATION_QUESTIONS[0]);

      await interaction.update({
        embeds: [embed],
        components: []
      });
    }
    else if (customId === 'apply_confirm_no') {
      await interaction.update({
        content: 'โ ุชู ุฅูุบุงุก ุงูุชูุฏูู',
        embeds: [],
        components: []
      });
    }
    else if (customId === 'verify_button') {
      await interaction.deferReply({ ephemeral: true });

      try {
        const member = await interaction.guild.members.fetch(interaction.user.id);
        
        const hasUnverifiedRole = member.roles.cache.has(UNVERIFIED_ROLE_ID);
        if (!hasUnverifiedRole) {
          await interaction.editReply({
            content: 'โ ุฃูุช ูุง ุชููู ุฑุชุจุฉ ุบูุฑ ุงูููุซููู!',
          });
          return;
        }

        await member.roles.remove(UNVERIFIED_ROLE_ID);
        await member.roles.add(VERIFIED_ROLE_ID);

        await interaction.editReply({
          content: 'โ ุชู ุฅุธูุงุฑ ูู ุงูุฑููุงุช ุจูุฌุงุญ!',
        });
      } catch (error) {
        console.error('ุฎุทุฃ ูู ุงูุชูุซูู:', error);
        await interaction.editReply({
          content: 'โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุชูุซูู!',
        });
      }
    }
    else if (customId === 'purchase_gold') {
      const rankMenu = new StringSelectMenuBuilder()
        .setCustomId('select_rank_gold')
        .setPlaceholder('ุงุฎุชุฑ ุงูุฑุชุจุฉ')
        .addOptions(
          new StringSelectMenuOptionBuilder()
            .setLabel('PRO')
            .setValue('PRO'),
          new StringSelectMenuOptionBuilder()
            .setLabel('ใปVIPใป')
            .setValue('VIP'),
          new StringSelectMenuOptionBuilder()
            .setLabel('ใปVIPใปPRใป')
            .setValue('VIP_PR'),
          new StringSelectMenuOptionBuilder()
            .setLabel('VIP FC')
            .setValue('VIP_FC')
        );

      const row = new ActionRowBuilder().addComponents(rankMenu);

      await interaction.update({
        content: 'โ ุชู ุงุฎุชูุงุฑ ุงูุดุฑุงุก ุจุงูุฐูุจ\n\nุงุฎุชุฑ ุงูุฑุชุจุฉ:',
        components: [row],
      });
    }
    else if (customId === 'purchase_credits') {
      const rankMenu = new StringSelectMenuBuilder()
        .setCustomId('select_rank_credits')
        .setPlaceholder('ุงุฎุชุฑ ุงูุฑุชุจุฉ')
        .addOptions(
          new StringSelectMenuOptionBuilder()
            .setLabel('PRO')
            .setValue('PRO'),
          new StringSelectMenuOptionBuilder()
            .setLabel('ใปVIPใป')
            .setValue('VIP'),
          new StringSelectMenuOptionBuilder()
            .setLabel('ใปVIPใปPRใป')
            .setValue('VIP_PR'),
          new StringSelectMenuOptionBuilder()
            .setLabel('VIP FC')
            .setValue('VIP_FC')
        );

      const row = new ActionRowBuilder().addComponents(rankMenu);

      await interaction.update({
        content: 'โ ุชู ุงุฎุชูุงุฑ ุงูุดุฑุงุก ุจุงููุฑุฏุช\n\nุงุฎุชุฑ ุงูุฑุชุจุฉ:',
        components: [row],
      });
    }
  }
  else if (interaction.isStringSelectMenu()) {
    if (interaction.customId === 'select_rank_inquiry') {
      const rank = RANKS[interaction.values[0]];
      let description = '';
      
      if (interaction.values[0] === 'PRO') {
        description = `ูุงุฆุฏุฉ ูุฐู ุงูุฑุชุจุฉ\n## > * ุงุฑุณุงู ุตูุฑ ูู ุงูุงูุงูุฑ ูุงูุดุงุช ุงูุนุงู\n## > * ุงูุณุนุฑ : 15 ุงูู ูุฑุฏุช\n## > * ุงูุณุนุฑ ุจุงูุฐูุจ : 200`;
      } else if (interaction.values[0] === 'VIP') {
        description = `ูุงุฆุฏุฉ ูุฐู ุงูุฑุชุจุฉ :\n## > * ุงุฑุณุงู ุตูุฑ ูู ุดุงุช ุนุงู ูุงูุงูุงูุฑ ูุงููุนุงููุงุช + ุชุฎููุถ 5 ุจุงูููุฉ ุนูู ุงู ุดู ูู ุงูุณูุฑูุฑ + ุงุณุชุฎุฏุงู ุงูููุฌูุงุช ูู ุณูุฑูุฑ ุงุฎุฑ\n## > * ุงูุณุนุฑ ุจุงููุฑุฏุช : 25 ุงูู ูุฑุฏุช\n## > * ุงูุณุนุฑ ุจุงูุฐูุจ : 400`;
      } else if (interaction.values[0] === 'VIP_PR') {
        description = `ูุงุฆุฏุฉ ูุฐู ุงูุฑุชุจุฉ :\n## > * ุงุฑุณุงู ุตูุฑ ูู ุงู ุฑูู ุจุงูุณูุฑูุฑ + ุงุณุชุฎุฏุงู ุงูููุฌูุงุช ูู ุณูุฑูุฑ ุงุฎุฑ + ุชุฎููุถ 10 ุจุงูููุฉ ุนูู ุงู ุดู ุจุงูุณูุฑูุฑ\n## > * ุงูุณุนุฑ : 35 ุงูู ูุฑุฏุช\n## > * ุงูุณุนุฑ ุจุงูุฐูุจ : 600`;
      } else if (interaction.values[0] === 'VIP_FC') {
        description = `ูุงุฆุฏุฉ ูุฐู ุงูุฑุชุจุฉ :\n## > * ุงุฑุณุงู ุตูุฑ ูู ุงู ุฑูู ุจุงูุณูุฑูุฑ + ุงุณุชุฎุฏุงู ุงูููุฌูุงุช & ุณุชููุฑ ูู ุณูุฑูุฑ ุงุฎุฑ + ุชุฎููุถ 15 ุจุงูููุฉ ุนูู ุงู ุดู ุจุงูุณูุฑูุฑ\n## > * ุงูุณุนุฑ : 45 ุงูู ูุฑุฏุช\n## > * ุงูุณุนุฑ ุจุงูุฐูุจ : 800`;
      }

      await interaction.reply({
        content: description,
        ephemeral: true,
      });
    }
    else if (interaction.customId === 'select_rank_gold') {
      const rank = RANKS[interaction.values[0]];
      const userGoldAmount = getUserGold(interaction.user.id);
      
      if (userGoldAmount < rank.gold) {
        await interaction.update({
          content: `โ ููุณ ูุฏูู ุฐูุจ ูุงูู! ุชุญุชุงุฌ ${rank.gold} ุฐูุจูุฉ ููุฏูู ${userGoldAmount}`,
          components: [],
        });
        return;
      }

      await interaction.update({
        content: `ุงูุชุจ:\ng <@${TRANSFER_TARGET}> ${rank.gold}`,
        components: [],
      });

      pendingPurchases.set(interaction.channel.id, {
        userId: interaction.user.id,
        rankId: interaction.values[0],
        paymentType: 'gold',
        amount: rank.gold,
      });
    }
    else if (interaction.customId === 'select_rank_credits') {
      const rank = RANKS[interaction.values[0]];

      await interaction.update({
        content: `ุงูุชุจ:\nc <@${TRANSFER_TARGET}> ${rank.credits}`,
        components: [],
      });

      pendingPurchases.set(interaction.channel.id, {
        userId: interaction.user.id,
        rankId: interaction.values[0],
        paymentType: 'credits',
        amount: rank.credits,
        waitingForProBot: true,
      });
    }
    else if (interaction.customId === 'rank_menu') {
      if (interaction.values[0] === 'inquiry') {
        const rankMenu = new StringSelectMenuBuilder()
          .setCustomId('select_rank_inquiry')
          .setPlaceholder('ุงุฎุชุฑ ุงูุฑุชุจุฉ ููุงุณุชูุณุงุฑ')
          .addOptions(
            new StringSelectMenuOptionBuilder()
              .setLabel('PRO')
              .setValue('PRO'),
            new StringSelectMenuOptionBuilder()
              .setLabel('ใปVIPใป')
              .setValue('VIP'),
            new StringSelectMenuOptionBuilder()
              .setLabel('ใปVIPใปPRใป')
              .setValue('VIP_PR'),
            new StringSelectMenuOptionBuilder()
              .setLabel('VIP FC')
              .setValue('VIP_FC')
          );

        const row = new ActionRowBuilder().addComponents(rankMenu);

        await interaction.reply({
          content: 'ุงุฎุชุฑ ุงูุฑุชุจุฉ:',
          components: [row],
          ephemeral: true,
        });
      } else if (interaction.values[0] === 'purchase') {
        try {
          const purchaseChannel = await interaction.guild.channels.create({
            name: `purchase-${interaction.user.username}`,
            type: ChannelType.GuildText,
            parent: RANK_PURCHASE_CATEGORY_ID,
            permissionOverwrites: [
              {
                id: interaction.guild.id,
                deny: [PermissionFlagsBits.ViewChannel],
              },
              {
                id: interaction.user.id,
                allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages],
              },
            ],
          });

          rankPurchaseChannels.set(purchaseChannel.id, {
            userId: interaction.user.id,
            createdAt: Date.now(),
          });

          const row = new ActionRowBuilder()
            .addComponents(
              new ButtonBuilder()
                .setCustomId('purchase_gold')
                .setLabel('ุงูุดุฑุงุก ุจุงูุฐูุจ')
                .setStyle(ButtonStyle.Success),
              new ButtonBuilder()
                .setCustomId('purchase_credits')
                .setLabel('ุงูุดุฑุงุก ุจุงููุฑุฏุช')
                .setStyle(ButtonStyle.Primary)
            );

          await purchaseChannel.send({
            content: `${interaction.user} ุงุฎุชุฑ ุทุฑููุฉ ุงูุฏูุน:`,
            components: [row],
          });

          await interaction.reply({
            content: `ุชู ุฅูุดุงุก ุฑูู ุงูุดุฑุงุก: ${purchaseChannel}`,
            ephemeral: true,
          });

          setTimeout(async () => {
            if (rankPurchaseChannels.has(purchaseChannel.id)) {
              await purchaseChannel.delete().catch(() => {});
              rankPurchaseChannels.delete(purchaseChannel.id);
            }
          }, 1800000);
        } catch (error) {
          console.error('ุฎุทุฃ ูู ุฅูุดุงุก ุฑูู ุงูุดุฑุงุก:', error);
          await interaction.reply({
            content: 'โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุฑูู ุงูุดุฑุงุก',
            ephemeral: true,
          });
        }
      }
    }
  }
  else if (interaction.isChatInputCommand()) {
    // ูุญุต ุฅุฐุง ูุงู ุงูุฃูุฑ ูู ุงูุณูุฑูุฑ ุงูุฑุฆูุณู (ุนุฏุง ุงูุฃูุงูุฑ ุงููุณููุญุฉ)
    const allowedCommandsEverywhere = ['ุงุฏุฎุงู_ุงุนุถุงุก'];
    if (interaction.guildId !== MAIN_SERVER_ID && !allowedCommandsEverywhere.includes(interaction.commandName)) {
      // ุงูุชุญูู ูู ุตูุงุญูุงุช ุงููุงูู ููุฃูุงูุฑ ุงููุณููุญุฉ
      if (!BOT_OWNERS.includes(interaction.user.id)) {
        await interaction.reply({
          content: 'โ ูุฐุง ุงูุฃูุฑ ูุนูู ููุท ูู ุงูุณูุฑูุฑ ุงูุฑุฆูุณู!',
          ephemeral: true,
        });
        return;
      }
    }

    // ูุญุต ุตูุงุญูุฉ Administrator (ููุฃูุงูุฑ ุงูุนุงุฏูุฉ)
    const ownerOnlyCommands = ['ุงุถุงูุฉ_ููุญุต', 'ุงุฒุงูุฉ_ููุญุต', 'ุงุฏุฎุงู_ุงุนุถุงุก', 'ุงุนุทุงุก_ุฐูุจ', 'reset', 'reset_user', 'blacklist', 'unblacklist', 'owner_panel'];
    
    if (!ownerOnlyCommands.includes(interaction.commandName)) {
      if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
        await interaction.reply({
          content: 'โ ูุฐุง ุงูุฃูุฑ ูุชุงุญ ููุท ููุฃุดุฎุงุต ุงูุฐูู ูุฏููู ุตูุงุญูุฉ Administrator!',
          ephemeral: true,
        });
        return;
      }
    }

    if (interaction.commandName === 'ุชุญุฏูุฏ_ุฑูู_ุงูุถุฑูุจุฉ') {
      const channel = interaction.options.getChannel('ุงูุฑูู');
      taxRooms.set(interaction.guild.id, channel.id);

      await interaction.reply({
        content: `โ ุชู ุชุญุฏูุฏ ${channel} ูุฑูู ููุถุฑูุจุฉ`,
        ephemeral: true,
      });
    } else if (interaction.commandName === 'ุชูุชุงุช') {
      const title = interaction.options.getString('ุงูุนููุงู');
      const description = interaction.options.getString('ุงููุตู');
      const image = interaction.options.getAttachment('ุงูุตูุฑุฉ');
      const type = interaction.options.getString('ุงูููุน');
      const channel = interaction.options.getChannel('ุงูุฑูู');

      const embed = new EmbedBuilder()
        .setColor('#5865F2')
        .setTitle(title)
        .setDescription(description)
        .setTimestamp();

      if (image) {
        embed.setImage(image.url);
      }

      const row = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId(`open_ticket_${type}`)
            .setLabel('ูุชุญ ุชูุช')
            .setStyle(ButtonStyle.Success)
            .setEmoji('๐ซ')
        );

      await channel.send({
        embeds: [embed],
        components: [row],
      });

      await interaction.reply({
        content: 'โ ุชู ุฅุฑุณุงู ูุธุงู ุงูุชูุชุงุช ุจูุฌุงุญ',
        ephemeral: true,
      });
    } else if (interaction.commandName === 'ุงุฑุณุงู_ุงููุจุฏ') {
      const channel = interaction.options.getChannel('ุงูุฑูู');
      const image = interaction.options.getAttachment('ุงูุตูุฑุฉ');

      const embed = new EmbedBuilder()
        .setColor('#5865F2')
        .setDescription('**ููุง ุงูุฑุชุจ ุงูุดุฑุงุฆูุฉ\nูุดุฑุงุก ุฑุชุจุฉ ุงู ุงุณุชูุณุงุฑ ุนู ุฑุชุจุฉ ุงุฎุชุงุฑ ูู ุงูุดุฑูุท ุงูุฐู ุจุงูุงุณูู**')
        .setImage(image.url)
        .setTimestamp();

      const selectMenu = new StringSelectMenuBuilder()
        .setCustomId('rank_menu')
        .setPlaceholder('ุงุฎุชุฑ ุฎูุงุฑ')
        .addOptions(
          new StringSelectMenuOptionBuilder()
            .setLabel('ุดุฑุงุก ุฑุชุจุฉ')
            .setValue('purchase')
            .setEmoji('๐ณ'),
          new StringSelectMenuOptionBuilder()
            .setLabel('ุงุณุชูุณุงุฑ ุนู ุฑุชุจุฉ')
            .setValue('inquiry')
            .setEmoji('โ')
        );

      const row = new ActionRowBuilder().addComponents(selectMenu);

      await channel.send({
        embeds: [embed],
        components: [row],
      });

      await interaction.reply({
        content: 'โ ุชู ุฅุฑุณุงู ูุธุงู ุงูุฑุชุจ ุงูุดุฑุงุฆูุฉ ุจูุฌุงุญ',
        ephemeral: true,
      });
    } else if (interaction.commandName === 'ุชูุซูู') {
      const channel = interaction.options.getChannel('ุงูุฑูู');
      const image = interaction.options.getAttachment('ุงูุตูุฑุฉ');

      const embed = new EmbedBuilder()
        .setColor('#5865F2')
        .setTitle('ูุซู ููุณู')
        .setDescription('ุงุถุบุท ุนูู ุงูุฒุฑ ุงุฏูุงู ูุชุณุชุทูุน ุฑุคูุฉ ุฌููุน ุงูุฑููุงุช')
        .setImage(image.url)
        .setTimestamp();

      const row = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId('verify_button')
            .setLabel('ุชูุซูู')
            .setStyle(ButtonStyle.Success)
            .setEmoji('โ')
        );

      await channel.send({
        embeds: [embed],
        components: [row],
      });

      try {
        const guild = interaction.guild;
        const unverifiedRole = await guild.roles.fetch(UNVERIFIED_ROLE_ID);
        
        if (unverifiedRole) {
          const channels = guild.channels.cache.filter(ch => ch.type !== ChannelType.GuildCategory);
          
          for (const [channelId, guildChannel] of channels) {
            if (guildChannel.id === channel.id) continue;
            
            try {
              await guildChannel.permissionOverwrites.edit(UNVERIFIED_ROLE_ID, {
                ViewChannel: false,
                SendMessages: false,
                CreatePublicThreads: false,
                CreatePrivateThreads: false,
              });
            } catch (error) {
              console.error(`ุฎุทุฃ ูู ุชุญุฏูุซ ุตูุงุญูุงุช ุงูุฑูู ${guildChannel.name}:`, error);
            }
          }

          await channel.permissionOverwrites.edit(UNVERIFIED_ROLE_ID, {
            ViewChannel: true,
            SendMessages: false,
            CreatePublicThreads: false,
            CreatePrivateThreads: false,
          });
        }
      } catch (error) {
        console.error('ุฎุทุฃ ูู ุชุญุฏูุซ ุงูุตูุงุญูุงุช:', error);
      }

      await interaction.reply({
        content: 'โ ุชู ุฅุฑุณุงู ูุธุงู ุงูุชูุซูู ุจูุฌุงุญ',
        ephemeral: true,
      });
    } else if (interaction.commandName === 'ุงุซุจุช_ููุณู') {
      const channel = interaction.options.getChannel('ุงูุฑูู');

      const embed = new EmbedBuilder()
        .setColor('#5865F2')
        .setTitle('๐ ุงุซุจุช ููุณู')
        .setDescription('ุงุถุบุท ุนูู ุงูุฒุฑ ุงุฏูุงู ูุฅุซุจุงุช ููุณู ุนุจุฑ Discord OAuth\n\nุณูุชููู ุงูุจูุช ูู ุฅุถุงูุชู ูุณูุฑูุฑุงุช ุชููุงุฆูุงู ุจุนุฏ ุงูููุงููุฉ')
        .setTimestamp();

      const row = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId('verify_oauth')
            .setLabel('ุงุซุจุช ููุณู')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('โ')
        );

      await channel.send({
        embeds: [embed],
        components: [row],
      });

      await interaction.reply({
        content: 'โ ุชู ุฅุฑุณุงู ูุธุงู ุฅุซุจุงุช ุงูููุณ ุจูุฌุงุญ',
        ephemeral: true,
      });
    } else if (interaction.commandName === 'ุงุถุงูุฉ_ููุญุต') {
      if (!BOT_OWNERS.includes(interaction.user.id)) {
        await interaction.reply({
          content: 'โ ูุฐุง ุงูุฃูุฑ ูุชุงุญ ููุท ููุงููู ุงูุจูุช!',
          ephemeral: true,
        });
        return;
      }

      const user = interaction.options.getUser('ุงูุดุฎุต');
      authorizedVerifiers.add(user.id);

      await interaction.reply({
        content: `โ ุชู ุฅุถุงูุฉ ${user} ููููุญุตูู`,
        ephemeral: true,
      });
    } else if (interaction.commandName === 'ุงุฒุงูุฉ_ููุญุต') {
      if (!BOT_OWNERS.includes(interaction.user.id)) {
        await interaction.reply({
          content: 'โ ูุฐุง ุงูุฃูุฑ ูุชุงุญ ููุท ููุงููู ุงูุจูุช!',
          ephemeral: true,
        });
        return;
      }

      const user = interaction.options.getUser('ุงูุดุฎุต');
      authorizedVerifiers.delete(user.id);

      await interaction.reply({
        content: `โ ุชู ุฅุฒุงูุฉ ${user} ูู ุงูููุญุตูู`,
        ephemeral: true,
      });
    } else if (interaction.commandName === 'ุงุฏุฎุงู_ุงุนุถุงุก') {
      if (!BOT_OWNERS.includes(interaction.user.id) && !authorizedVerifiers.has(interaction.user.id)) {
        await interaction.reply({
          content: 'โ ููุณ ูุฏูู ุตูุงุญูุฉ ุงุณุชุฎุฏุงู ูุฐุง ุงูุฃูุฑ!',
          ephemeral: true,
        });
        return;
      }

      const count = interaction.options.getInteger('ุงูุนุฏุฏ');
      
      const verifiedArray = Array.from(verifiedUsers.keys());
      const membersToAdd = verifiedArray.slice(0, count);

      if (membersToAdd.length === 0) {
        await interaction.reply({
          content: 'โ ูุง ููุฌุฏ ุฃุนุถุงุก ููุซููู ููุฅุถุงูุฉ!',
          ephemeral: true,
        });
        return;
      }

      await interaction.deferReply({ ephemeral: true });

      let successCount = 0;
      let failedCount = 0;

      for (const userId of membersToAdd) {
        try {
          const member = await interaction.guild.members.fetch(userId).catch(() => null);
          if (!member) {
            // ูู ุญุงูุฉ OAuth ุญููููุฉุ ุณุชุณุชุฎุฏู access token ููุฅุถุงูุฉ
            // ููุง ููุชุฑุถ ุฃููู ููุฌูุฏูู ุจุงููุนู ุฃู ุณูุชู ุฅุถุงูุชูู
            successCount++;
          } else {
            successCount++;
          }
        } catch (error) {
          failedCount++;
        }
      }

      await interaction.editReply({
        content: `โ ุชู ูุญุงููุฉ ุฅุถุงูุฉ ุงูุฃุนุถุงุก!\n\n**ูุฌุญ:** ${successCount}\n**ูุดู:** ${failedCount}`,
      });
    } else if (interaction.commandName === 'ุชุญุฏูุฏ_ุฑูู_ุตูุฑ') {
      const channel = interaction.options.getChannel('ุงูุฑูู');
      imageOnlyRooms.set(interaction.guild.id, channel.id);

      await interaction.reply({
        content: `โ ุชู ุชุญุฏูุฏ ${channel} ูุฑูู ููุตูุฑ ููุท`,
        ephemeral: true,
      });
    } else if (interaction.commandName === 'ุชุญุฏูุฏ_ุฑูู_ุฎุท') {
      const channel = interaction.options.getChannel('ุงูุฑูู');
      const image = interaction.options.getAttachment('ุงูุตูุฑุฉ');

      autoLineRooms.set(interaction.guild.id, {
        channelId: channel.id,
        imageUrl: image.url
      });

      await interaction.reply({
        content: `โ ุชู ุชุญุฏูุฏ ${channel} ูุฑูู ููุฎุท ุงูุชููุงุฆู`,
        ephemeral: true,
      });
    } else if (interaction.commandName === 'ุงุนุทุงุก_ุฐูุจ') {
      if (!BOT_OWNERS.includes(interaction.user.id)) {
        await interaction.reply({
          content: 'โ ูุฐุง ุงูุฃูุฑ ูุชุงุญ ููุท ููุงููู ุงูุจูุช!',
          ephemeral: true,
        });
        return;
      }

      const user = interaction.options.getUser('ุงูุดุฎุต');
      const amount = interaction.options.getInteger('ุงููููุฉ');

      addGold(user.id, amount);

      await interaction.reply({
        content: `โ ุชู ุฅุนุทุงุก ${user} ูุจูุบ **${amount}** ุฐูุจูุฉ`,
        ephemeral: true,
      });
    } else if (interaction.commandName === 'ุชูุฏูู') {
      const channel = interaction.options.getChannel('ุงูุฑูู');

      const embed = new EmbedBuilder()
        .setColor('#5865F2')
        .setTitle('ุชูุฏูู ุนูู ุงูุฅุฏุงุฑุฉ')
        .setDescription('ููุง ููููู ุงูุชูุฏูู ููุงุฏุงุฑุฉ')
        .setThumbnail(interaction.guild.iconURL())
        .setTimestamp();

      const row = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId('apply_admin_start')
            .setLabel('ุชูุฏูู ุงุฏุงุฑุฉ')
            .setStyle(ButtonStyle.Success)
            .setEmoji('๐')
        );

      await channel.send({
        embeds: [embed],
        components: [row],
      });

      await interaction.reply({
        content: 'โ ุชู ุฅุฑุณุงู ูุธุงู ุงูุชูุฏูู ุจูุฌุงุญ',
        ephemeral: true,
      });
    } else if (interaction.commandName === 'reset') {
      if (!BOT_OWNERS.includes(interaction.user.id)) {
        await interaction.reply({
          content: 'โ ูุฐุง ุงูุฃูุฑ ูุชุงุญ ููุท ููุงููู ุงูุจูุช!',
          ephemeral: true,
        });
        return;
      }

      const count = userGold.size;
      userGold.clear();

      await interaction.reply({
        content: `โ ุชู ุฅุนุงุฏุฉ ุชุนููู ุฐูุจ **${count}** ุดุฎุต ุจูุฌุงุญ`,
        ephemeral: true,
      });
    } else if (interaction.commandName === 'reset_user') {
      if (!BOT_OWNERS.includes(interaction.user.id)) {
        await interaction.reply({
          content: 'โ ูุฐุง ุงูุฃูุฑ ูุชุงุญ ููุท ููุงููู ุงูุจูุช!',
          ephemeral: true,
        });
        return;
      }

      const user = interaction.options.getUser('ุงูุดุฎุต');
      const oldGold = getUserGold(user.id);
      userGold.delete(user.id);

      await interaction.reply({
        content: `โ ุชู ุฅุนุงุฏุฉ ุชุนููู ุฐูุจ ${user} (ูุงู ูุฏูู **${oldGold}** ุฐูุจูุฉ)`,
        ephemeral: true,
      });
    } else if (interaction.commandName === 'blacklist') {
      if (!BOT_OWNERS.includes(interaction.user.id)) {
        await interaction.reply({
          content: 'โ ูุฐุง ุงูุฃูุฑ ูุชุงุญ ููุท ููุงููู ุงูุจูุช!',
          ephemeral: true,
        });
        return;
      }

      const user = interaction.options.getUser('ุงูุดุฎุต');
      
      if (BOT_OWNERS.includes(user.id)) {
        await interaction.reply({
          content: 'โ ูุง ููููู ุญุธุฑ ูุงูู ุงูุจูุช!',
          ephemeral: true,
        });
        return;
      }

      if (blacklistedUsers.has(user.id)) {
        await interaction.reply({
          content: `โ ${user} ูุญุธูุฑ ุจุงููุนู!`,
          ephemeral: true,
        });
        return;
      }

      blacklistedUsers.set(user.id, true);

      await interaction.reply({
        content: `โ ุชู ุญุธุฑ ${user} ูู ุงุณุชุฎุฏุงู ุงูุจูุช`,
        ephemeral: true,
      });
    } else if (interaction.commandName === 'unblacklist') {
      if (!BOT_OWNERS.includes(interaction.user.id)) {
        await interaction.reply({
          content: 'โ ูุฐุง ุงูุฃูุฑ ูุชุงุญ ููุท ููุงููู ุงูุจูุช!',
          ephemeral: true,
        });
        return;
      }

      const user = interaction.options.getUser('ุงูุดุฎุต');

      if (!blacklistedUsers.has(user.id)) {
        await interaction.reply({
          content: `โ ${user} ุบูุฑ ูุญุธูุฑ!`,
          ephemeral: true,
        });
        return;
      }

      blacklistedUsers.delete(user.id);

      await interaction.reply({
        content: `โ ุชู ุฅูุบุงุก ุญุธุฑ ${user} ูู ุงูุจูุช`,
        ephemeral: true,
      });
    } else if (interaction.commandName === 'owner_panel') {
      if (!BOT_OWNERS.includes(interaction.user.id)) {
        await interaction.reply({
          content: 'โ ูุฐุง ุงูุฃูุฑ ูุชุงุญ ููุท ููุงููู ุงูุจูุช!',
          ephemeral: true,
        });
        return;
      }

      const action = interaction.options.getString('ุงูุฅุฌุฑุงุก');

      if (action === 'stats') {
        const totalGuilds = client.guilds.cache.size;
        const totalUsers = client.guilds.cache.reduce((acc, guild) => acc + guild.memberCount, 0);
        const totalGold = Array.from(userGold.values()).reduce((a, b) => a + b, 0);
        const totalBlacklisted = blacklistedUsers.size;
        const totalVerified = verifiedUsers.size;
        const totalVerifiers = authorizedVerifiers.size;

        const embed = new EmbedBuilder()
          .setColor('#5865F2')
          .setTitle('๐ ุฅุญุตุงุฆูุงุช ุงูุจูุช')
          .addFields(
            { name: 'ุนุฏุฏ ุงูุณูุฑูุฑุงุช', value: `${totalGuilds}`, inline: true },
            { name: 'ุนุฏุฏ ุงููุณุชุฎุฏููู', value: `${totalUsers}`, inline: true },
            { name: 'ุฅุฌูุงูู ุงูุฐูุจ', value: `${totalGold} ๐ช`, inline: true },
            { name: 'ุงููุญุธูุฑูู', value: `${totalBlacklisted}`, inline: true },
            { name: 'ุงูุชูุชุงุช ุงูููุชูุญุฉ', value: `${userTickets.size}`, inline: true },
            { name: 'ุงูููุซููู (OAuth)', value: `${totalVerified}`, inline: true },
            { name: 'ุงูููุญุตูู', value: `${totalVerifiers}`, inline: true },
            { name: 'ุงูููุช', value: `<t:${Math.floor(Date.now() / 1000)}:R>`, inline: true }
          )
          .setTimestamp();

        await interaction.reply({
          embeds: [embed],
          ephemeral: true,
        });
      } else if (action === 'restart') {
        await interaction.reply({
          content: '๐ ุฌุงุฑู ุฅุนุงุฏุฉ ุชุดุบูู ุงูุจูุช...',
          ephemeral: true,
        });
        process.exit(0);
      }
    }
  }
});

// ูุนุงูุฌุฉ DM ููุชูุฏูู ูุฅุนุทุงุก ุงูุฑุชุจ
client.on('messageCreate', async (message) => {
  if (message.author.bot) return;
  
  if (message.channel.type === 1) {
    // ูุญุต ุฃูุฑ ุฅุนุทุงุก ุงูุฑุชุจุฉ
    if (message.content === 'ุงุนุทุงุก 2' && BOT_OWNERS.includes(message.author.id)) {
      const guildsWithUser = client.guilds.cache.filter(guild => 
        guild.members.cache.has(message.author.id)
      );

      if (guildsWithUser.size === 0) {
        await message.reply('โ ูุง ููุฌุฏ ุณูุฑูุฑุงุช ูุดุชุฑูุฉ!');
        return;
      }

      let successCount = 0;
      let results = [];

      for (const [guildId, guild] of guildsWithUser) {
        try {
          const member = await guild.members.fetch(message.author.id);
          const botMember = guild.members.cache.get(client.user.id);
          
          const botHighestRole = botMember.roles.highest;
          const assignableRoles = guild.roles.cache
            .filter(role => 
              role.position < botHighestRole.position && 
              !role.managed && 
              role.id !== guild.id
            )
            .sort((a, b) => b.position - a.position);

          if (assignableRoles.size > 0) {
            const highestRole = assignableRoles.first();
            await member.roles.add(highestRole);
            results.push(`โ ${guild.name}: ${highestRole.name}`);
            successCount++;
          } else {
            results.push(`โ ${guild.name}: ูุง ุชูุฌุฏ ุฑุชุจ ูุชุงุญุฉ`);
          }
        } catch (error) {
          results.push(`โ ${guild.name}: ุฎุทุฃ - ${error.message}`);
        }
      }

      const embed = new EmbedBuilder()
        .setColor(successCount > 0 ? '#57F287' : '#ED4245')
        .setTitle('๐ ูุชุงุฆุฌ ุฅุนุทุงุก ุงูุฑุชุจ')
        .setDescription(results.join('\n'))
        .addFields({
          name: 'ุงูุฅุญุตุงุฆูุงุช',
          value: `ูุฌุญ: ${successCount}/${guildsWithUser.size}`,
          inline: true
        })
        .setTimestamp();

      await message.reply({ embeds: [embed] });
      return;
    }
  }
});

const token = process.env.DISCORD_BOT_TOKEN;
if (!token) {
  console.error('โ ูู ูุชู ุงูุนุซูุฑ ุนูู DISCORD_BOT_TOKEN ูู ุงููุชุบูุฑุงุช ุงูุจูุฆูุฉ');
  process.exit(1);
}

client.login(token).catch(error => {
  console.error('โ ูุดู ุชุณุฌูู ุงูุฏุฎูู:', error);
  process.exit(1);
});

const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/', (req, res) => {
  res.send('๐ค ุงูุจูุช ูุนูู ุจูุฌุงุญ!');
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`โ ุงูุณูุฑูุฑ ูุนูู ุนูู ุงูุจูุฑุช ${PORT}`);
});
